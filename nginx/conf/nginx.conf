
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Declare Server
    upstream authentication {
        server localhost:8001;
        # server backend2.example.com;
    }

    upstream userService {
        server localhost:8002;
        # server backend2.example.com;
    }

    upstream eventService {
        server localhost:8003;
        # server backend2.example.com;
    }
    upstream gameService {
        server localhost:8004;
        # server backend2.example.com;
    }
    upstream notificationService {
        server localhost:8005;
        # server backend2.example.com;
    }
    upstream mcService {
        server localhost:8007;
        # server backend2.example.com;
    }
    upstream reportService {
        server localhost:8008;
        # server backend2.example.com;
    }

    # Public location
    map $request_uri $auth_required {
        default 1;
        ~^/auth 0;
        ~^/tien 0;
    }

    server {
        listen       8000;
        server_name  localhost;

        # verify token
        location = /auth/verify {
            internal;
            # return 401 'Unauthorized';
            proxy_pass http://authentication;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";  
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }


        location / {
            internal;
            location /auth {
                proxy_pass http://authentication;
            }

            location /user {
                proxy_pass http://userService;
                
            }

            location /event {
                proxy_pass http://eventService;
            }

            location /game {
                proxy_pass http://gameService;
            }

            location /notification {
                proxy_pass http://notificationService;
            }

            location /mc {
                proxy_pass http://mcService;
            }

            location /report {
                proxy_pass http://reportService;
            } 
        }

        location /api {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            if ($auth_required) {
               rewrite ^/(.*)$ /intern/$1 last;
            }
            
            rewrite ^/api/(.*)$ /$1 last;
        }

        location /intern {
            internal;
            auth_request /auth/verify;
            auth_request_set $auth_status $upstream_status;

            rewrite ^/intern/api/(.*)$ /$1 last;
        }


        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # Set location xu ly loi 401, 403
        error_page 401 @error401;
        error_page 403 @error403;

        # Location xử lý lỗi 401
        location @error401 {
            internal;
            return 401 'Unauthorized';
        }

        # Location xử lý lỗi 403
        location @error403 {
            internal;
            return 403 'Forbidden';
        }

    }
}
