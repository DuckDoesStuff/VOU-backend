
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

# #RTMP configuration
# rtmp {
#     server {
#         listen 1935;

#         application live {
#             live on;
#             # Push the stream to the local HLS application
#             push rtmp://localhost:1935/hls;
#         }

#         application hls {
#             live on;

#             # Only accept publishing from localhost.
#             allow publish 127.0.0.1;
#             deny publish all;

#             # Streams as HLS
#             hls on;
#             hls_path /tmp/hls;
#             hls_fragment 3s;
#             hls_nested on;
#             hls_fragment_naming system;
#         }
#     }
# }


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Declare Server
    upstream authentication {
        server auth-service:8001;
        # server localhost:8001;
        # server backend2.example.com;
    }

    upstream userService {
        server user-service:8002;
        # server localhost:8002;
        # server backend2.example.com;
    }

    upstream eventService {
        server event-service:8003;
        # server localhost:8003;
        # server backend2.example.com;
    }
    upstream gameService {
        server game-service:8004;
        # server localhost:8004;
        # server backend2.example.com;
    }
    upstream notificationService {
        server notification-service:8005;
        # server localhost:8005;
        # server backend2.example.com;
    }
    upstream mcService {
        server mc-service:8006;
        # server localhost:8006;
        # server backend2.example.com;
    }
    upstream reportService {
        server report-service:8007;
        # server localhost:8008;
        # server backend2.example.com;
    }

    upstream mcSocketService {
        server mc-service:8100;
        # server localhost:8100;
        #server backend2.example.com;
    }
    upstream notiSocketService {
        server notification-service:8200;
        # server localhost:8200;
        #server backend2.example.com;
    }

    # Public location
    map $request_uri $auth_required {
        default 0; #1 la true
        # ~^(.*)/auth 0;
        ~^/tien 0;
    }

    server {
        listen       8000;
        # server_name  localhost;

        set $cors_origin "";

        # List of allowed origins
        if ($http_origin ~* "http?://(localhost:5173|localhost:8081)") {
            set $cors_origin $http_origin;
        }

        # verify token
        location = /verify {
            internal;
            proxy_pass http://authentication/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";  
            # proxy_set_header X-Original-URI $request_uri;
            # proxy_set_header Authorization $http_authorization;
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /mc/socket.io/ {

            rewrite ^/mc(.*)$ $1 break;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            proxy_pass http://mcSocketService$1$is_args$args;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Forward các header cần thiết
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin *;  # Hoặc URL cụ thể của client
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept';

            # Tùy chọn timeout
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            send_timeout 60s;
        }

        location /notification/socket.io/ {
            rewrite ^/notification(.*)$ $1 break;
            # return 200 'OK';

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            proxy_pass http://notiSocketService/socket.io;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Forward các header cần thiết
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin *;  # Hoặc URL cụ thể của client
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept';

            # Tùy chọn timeout
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            send_timeout 60s;
        }

        location /api {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS, DELETE';
                #
                # Custom headers and headers various browsers should be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }

            if ($auth_required) {
               rewrite ^/api(.*)$ /secure$1 last;
            }
            # return 200 'OK';
            rewrite ^/api(.*)$ /public$1 last;
            
        }

        location /secure {
            internal;
            auth_request /verify;
            auth_request_set $auth_status $upstream_status;

            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            rewrite ^/secure(.*)$ $1 break;

            location /secure/auth {
                proxy_pass http://authentication$1$is_args$args;
            }

            location /secure/profile {
                proxy_pass http://userService$1$is_args$args;
                
            }

            location /secure/event {
                proxy_pass http://eventService$1$is_args$args;
            }

            location /secure/game {
                proxy_pass http://gameService$1$is_args$args;
            }

            location /secure/notification {
                proxy_pass http://notificationService$1$is_args$args;
            }

            location /secure/mc {
                proxy_pass http://mcService$1$is_args$args;
            }

            location /secure/report {
                proxy_pass http://reportService$1$is_args$args;
            }                              
        }


        location /public {
            internal;
            rewrite ^/public(.*)$ $1 break;

            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            location /public/auth {
                proxy_pass http://authentication$1$is_args$args;
            }

            location /public/otp {
                proxy_pass http://authentication$1$is_args$args;
            }

            location /public/profile {
                proxy_pass http://userService$1$is_args$args;
                
            }

            location /public/event {
                proxy_pass http://eventService$1$is_args$args;
            }

            location /public/game {
                proxy_pass http://gameService$1$is_args$args;
            }

            location /public/notification {
                proxy_pass http://notificationService$1$is_args$args;
            }

            location /public/mc {
                proxy_pass http://mcService$1$is_args$args;

            }

            location /public/report {
                proxy_pass http://reportService$1$is_args$args;
            } 
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # Set location xu ly loi 401, 403
        error_page 401 @error401;
        error_page 403 @error403;

        # Location xử lý lỗi 401
        location @error401 {
            internal;
            return 401 'Unauthorized quan qua';
        }

        # Location xử lý lỗi 403
        location @error403 {
            internal;
            return 403 'Forbidden quan qua';
        }

    }
}
